// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// circle_lookup
NumericMatrix circle_lookup(NumericMatrix x, NumericMatrix y, double radius);
RcppExport SEXP _APAtree_circle_lookup(SEXP xSEXP, SEXP ySEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type radius(radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(circle_lookup(x, y, radius));
    return rcpp_result_gen;
END_RCPP
}
// get_boundary_pixels
IntegerMatrix get_boundary_pixels(IntegerMatrix x);
RcppExport SEXP _APAtree_get_boundary_pixels(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(get_boundary_pixels(x));
    return rcpp_result_gen;
END_RCPP
}
// get_neighborhood_boundary_pixels
IntegerMatrix get_neighborhood_boundary_pixels(NumericMatrix x, NumericMatrix y, double radius);
RcppExport SEXP _APAtree_get_neighborhood_boundary_pixels(SEXP xSEXP, SEXP ySEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type radius(radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(get_neighborhood_boundary_pixels(x, y, radius));
    return rcpp_result_gen;
END_RCPP
}
// get_subplot_boundary_pixels
IntegerMatrix get_subplot_boundary_pixels(StringVector x_wkt, NumericMatrix y);
RcppExport SEXP _APAtree_get_subplot_boundary_pixels(SEXP x_wktSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type x_wkt(x_wktSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(get_subplot_boundary_pixels(x_wkt, y));
    return rcpp_result_gen;
END_RCPP
}
// multipoint_linestring_distance
NumericVector multipoint_linestring_distance(NumericMatrix multipoint, NumericMatrix linestring);
RcppExport SEXP _APAtree_multipoint_linestring_distance(SEXP multipointSEXP, SEXP linestringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type multipoint(multipointSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type linestring(linestringSEXP);
    rcpp_result_gen = Rcpp::wrap(multipoint_linestring_distance(multipoint, linestring));
    return rcpp_result_gen;
END_RCPP
}
// neighborhood_ca
IntegerMatrix neighborhood_ca(NumericMatrix x, NumericMatrix y, double radius);
RcppExport SEXP _APAtree_neighborhood_ca(SEXP xSEXP, SEXP ySEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type radius(radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(neighborhood_ca(x, y, radius));
    return rcpp_result_gen;
END_RCPP
}
// polygonize_class_cpp
List polygonize_class_cpp(NumericMatrix x, int direction);
RcppExport SEXP _APAtree_polygonize_class_cpp(SEXP xSEXP, SEXP directionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type direction(directionSEXP);
    rcpp_result_gen = Rcpp::wrap(polygonize_class_cpp(x, direction));
    return rcpp_result_gen;
END_RCPP
}
// rasterized_weighted_voronoi
List rasterized_weighted_voronoi(NumericMatrix rst, NumericMatrix points);
RcppExport SEXP _APAtree_rasterized_weighted_voronoi(SEXP rstSEXP, SEXP pointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type rst(rstSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type points(pointsSEXP);
    rcpp_result_gen = Rcpp::wrap(rasterized_weighted_voronoi(rst, points));
    return rcpp_result_gen;
END_RCPP
}
// subplot_ca
IntegerMatrix subplot_ca(CharacterVector x_wkt, NumericMatrix y);
RcppExport SEXP _APAtree_subplot_ca(SEXP x_wktSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x_wkt(x_wktSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(subplot_ca(x_wkt, y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_APAtree_circle_lookup", (DL_FUNC) &_APAtree_circle_lookup, 3},
    {"_APAtree_get_boundary_pixels", (DL_FUNC) &_APAtree_get_boundary_pixels, 1},
    {"_APAtree_get_neighborhood_boundary_pixels", (DL_FUNC) &_APAtree_get_neighborhood_boundary_pixels, 3},
    {"_APAtree_get_subplot_boundary_pixels", (DL_FUNC) &_APAtree_get_subplot_boundary_pixels, 2},
    {"_APAtree_multipoint_linestring_distance", (DL_FUNC) &_APAtree_multipoint_linestring_distance, 2},
    {"_APAtree_neighborhood_ca", (DL_FUNC) &_APAtree_neighborhood_ca, 3},
    {"_APAtree_polygonize_class_cpp", (DL_FUNC) &_APAtree_polygonize_class_cpp, 2},
    {"_APAtree_rasterized_weighted_voronoi", (DL_FUNC) &_APAtree_rasterized_weighted_voronoi, 2},
    {"_APAtree_subplot_ca", (DL_FUNC) &_APAtree_subplot_ca, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_APAtree(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
